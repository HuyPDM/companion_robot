#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int order_type = 0;
layout (constant_id = 1) const int bugihfa = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) readonly buffer bottom_blob { sfp bottom_blob_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
int dims;
int w;
int h;
int c;
int cstep;

int outdims;
int outw;
int outh;
int outc;
int outcstep;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
return;

#if NCNN_image_shader
if (psc(dims) == 2)
{
// order_type
// 0 = w h
// 1 = h w

afpvec4 v;

if (order_type == 0)
{
ivec4 y4 = gy * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.r, 0));
v.g = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.g, 0));
v.b = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.b, 0));
v.a = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.a, 0));
}
if (order_type == 1)
{
ivec4 x4 = gy * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(x4.r, gx, 0));
v.g = image3d_ld1(bottom_blob_3d, ivec3(x4.g, gx, 0));
v.b = image3d_ld1(bottom_blob_3d, ivec3(x4.b, gx, 0));
v.a = image3d_ld1(bottom_blob_3d, ivec3(x4.a, gx, 0));
}

image3d_st4(top_blob_3d, ivec3(gx, gy, 0), v);
}
else // if (psc(dims) == 3)
{
// order_type
// 0 = w h c
// 1 = h w c
// 2 = w c h
// 3 = c w h
// 4 = h c w
// 5 = c h w

afpvec4 v;

if (order_type == 0)
{
ivec4 z4 = gz * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4.r));
v.g = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4.g));
v.b = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4.b));
v.a = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, z4.a));
}
if (order_type == 1)
{
ivec4 z4 = gz * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(gy, gx, z4.r));
v.g = image3d_ld1(bottom_blob_3d, ivec3(gy, gx, z4.g));
v.b = image3d_ld1(bottom_blob_3d, ivec3(gy, gx, z4.b));
v.a = image3d_ld1(bottom_blob_3d, ivec3(gy, gx, z4.a));
}
if (order_type == 2)
{
ivec4 y4 = gz * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.r, gy));
v.g = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.g, gy));
v.b = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.b, gy));
v.a = image3d_ld1(bottom_blob_3d, ivec3(gx, y4.a, gy));
}
if (order_type == 3)
{
ivec4 y4 = gz * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(gy, y4.r, gx));
v.g = image3d_ld1(bottom_blob_3d, ivec3(gy, y4.g, gx));
v.b = image3d_ld1(bottom_blob_3d, ivec3(gy, y4.b, gx));
v.a = image3d_ld1(bottom_blob_3d, ivec3(gy, y4.a, gx));
}
if (order_type == 4)
{
ivec4 x4 = gz * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(x4.r, gx, gy));
v.g = image3d_ld1(bottom_blob_3d, ivec3(x4.g, gx, gy));
v.b = image3d_ld1(bottom_blob_3d, ivec3(x4.b, gx, gy));
v.a = image3d_ld1(bottom_blob_3d, ivec3(x4.a, gx, gy));
}
if (order_type == 5)
{
ivec4 x4 = gz * 4 + ivec4(0, 1, 2, 3);

v.r = image3d_ld1(bottom_blob_3d, ivec3(x4.r, gy, gx));
v.g = image3d_ld1(bottom_blob_3d, ivec3(x4.g, gy, gx));
v.b = image3d_ld1(bottom_blob_3d, ivec3(x4.b, gy, gx));
v.a = image3d_ld1(bottom_blob_3d, ivec3(x4.a, gy, gx));
}

image3d_st4(top_blob_3d, ivec3(gx, gy, gz), v);
}
#else
ivec4 v_offset;

if (psc(dims) == 2)
{
// order_type
// 0 = w h
// 1 = h w

if (order_type == 0)
{
v_offset = (gy * 4 + ivec4(0, 1, 2, 3)) * psc(w) + gx;
}
if (order_type == 1)
{
v_offset = gx * psc(w) + (gy * 4 + ivec4(0, 1, 2, 3));
}
}
else // if (psc(dims) == 3)
{
// order_type
// 0 = w h c
// 1 = h w c
// 2 = w c h
// 3 = c w h
// 4 = h c w
// 5 = c h w

if (order_type == 0)
{
v_offset = (gz * 4 + ivec4(0, 1, 2, 3)) * psc(cstep) + gy * psc(w) + gx;
}
if (order_type == 1)
{
v_offset = (gz * 4 + ivec4(0, 1, 2, 3)) * psc(cstep) + gx * psc(w) + gy;
}
if (order_type == 2)
{
v_offset = gy * psc(cstep) + (gz * 4 + ivec4(0, 1, 2, 3)) * psc(w) + gx;
}
if (order_type == 3)
{
v_offset = gx * psc(cstep) + (gz * 4 + ivec4(0, 1, 2, 3)) * psc(w) + gy;
}
if (order_type == 4)
{
v_offset = gy * psc(cstep) + gx * psc(w) + (gz * 4 + ivec4(0, 1, 2, 3));
}
if (order_type == 5)
{
v_offset = gx * psc(cstep) + gy * psc(w) + (gz * 4 + ivec4(0, 1, 2, 3));
}
}

const int gi = gz * psc(outcstep) + gy * psc(outw) + gx;

buffer_cp1to4(top_blob_data, gi, bottom_blob_data, v_offset);
#endif
}
