#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int storage_type_from = 0;
layout (constant_id = 1) const int storage_type_to = 0;

#define shape_constant_id_offset 2
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

layout (binding = 0) readonly buffer bottom_blob_fp32 { mat2x4 bottom_blob_fp32_data[]; };
layout (binding = 1) writeonly buffer top_blob { sfpvec4 top_blob_data[]; };
#if NCNN_image_shader
layout (binding = 2) uniform highp sampler3D bottom_blob_3d_fp32;
layout (binding = 3, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#endif

layout (push_constant) uniform parameter
{
int dims;
int w;
int h;
int c;
int cstep;

int outdims;
int outw;
int outh;
int outc;
int outcstep;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
return;

afpvec8 v;

if (psc(dims) == 1)
{
if (storage_type_from == 0)
{
int gi = gx;

v = afpvec8(bottom_blob_fp32_data[gi]);
}
#if NCNN_image_shader
if (storage_type_from == 1)
{
v = afpvec8(texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2, 0, 0), 0), texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2 + 1, 0, 0), 0));
}
#endif

if (storage_type_to == 0)
{
ivec2 x2 = ivec2(gx * 2) + ivec2(0, 1);

ivec2 v_offset = x2;

buffer_st4(top_blob_data, v_offset.r, v[0]);
buffer_st4(top_blob_data, v_offset.g, v[1]);
}
#if NCNN_image_shader
if (storage_type_to == 1)
{
int x2 = gx * 2;

image3d_st4(top_blob_3d, ivec3(x2 + 0, 0, 0), v[0]);
image3d_st4(top_blob_3d, ivec3(x2 + 1, 0, 0), v[1]);
}
#endif
}
else if (psc(dims) == 2)
{
if (storage_type_from == 0)
{
int gi = gy * psc(w) + gx;

v = afpvec8(bottom_blob_fp32_data[gi]);
}
#if NCNN_image_shader
if (storage_type_from == 1)
{
v = afpvec8(texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2, gy, 0), 0), texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2 + 1, gy, 0), 0));
}
#endif

if (storage_type_to == 0)
{
ivec2 y2 = ivec2(gy * 2) + ivec2(0, 1);

ivec2 v_offset = y2 * psc(outw) + gx;

buffer_st4(top_blob_data, v_offset.r, v[0]);
buffer_st4(top_blob_data, v_offset.g, v[1]);
}
#if NCNN_image_shader
if (storage_type_to == 1)
{
int y2 = gy * 2;

image3d_st4(top_blob_3d, ivec3(gx, y2 + 0, 0), v[0]);
image3d_st4(top_blob_3d, ivec3(gx, y2 + 1, 0), v[1]);
}
#endif
}
else // if (psc(dims) == 3)
{
if (storage_type_from == 0)
{
int gi = gz * psc(cstep) + gy * psc(w) + gx;

v = afpvec8(bottom_blob_fp32_data[gi]);
}
#if NCNN_image_shader
if (storage_type_from == 1)
{
v = afpvec8(texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2, gy, gz), 0), texelFetch(bottom_blob_3d_fp32, ivec3(gx * 2 + 1, gy, gz), 0));
}
#endif

if (storage_type_to == 0)
{
ivec2 z2 = ivec2(gz * 2) + ivec2(0, 1);

ivec2 v_offset = z2 * psc(outcstep) + ivec2(gy * psc(outw) + gx);

buffer_st4(top_blob_data, v_offset.r, v[0]);
buffer_st4(top_blob_data, v_offset.g, v[1]);
}
#if NCNN_image_shader
if (storage_type_to == 1)
{
int z2 = gz * 2;

image3d_st4(top_blob_3d, ivec3(gx, gy, z2 + 0), v[0]);
image3d_st4(top_blob_3d, ivec3(gx, gy, z2 + 1), v[1]);
}
#endif
}
}
