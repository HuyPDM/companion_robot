#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
layout (binding = 2) uniform unfp sampler3D a;
layout (binding = 3) uniform unfp sampler3D b;
#else
layout (binding = 0) buffer bottom_top_blob { sfpvec8 bottom_top_blob_data[]; };
layout (binding = 1) readonly buffer a { sfpvec8 a_data[]; };
layout (binding = 2) readonly buffer b { sfpvec8 b_data[]; };
#endif

layout (push_constant) uniform parameter
{
int dims;
int w;
int h;
int c;
int cstep;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
return;

#if NCNN_image_shader
afpvec8 v = image3d_ld8(bottom_blob_3d, ivec3(gx, gy, gz));
#else
const int gi = gz * psc(cstep) + gy * psc(w) + gx;

afpvec8 v = buffer_ld8(bottom_top_blob_data, gi);
#endif

const ivec3 gxyz = ivec3(gx, gy, gz);
const int abi = gxyz[psc(dims) - 1];

#if NCNN_image_shader
afpvec8 b = image3d_ld8(b, ivec3(abi, 0, 0));
afpvec8 a = image3d_ld8(a, ivec3(abi, 0, 0));
#else
afpvec8 b = buffer_ld8(b_data, abi);
afpvec8 a = buffer_ld8(a_data, abi);
#endif

v[0] = b[0] * v[0] + a[0];
v[1] = b[1] * v[1] + a[1];

#if NCNN_image_shader
image3d_st8(top_blob_3d, ivec3(gx, gy, gz), v);
#else
buffer_st8(bottom_top_blob_data, gi, v);
#endif
}
