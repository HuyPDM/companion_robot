#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

#define shape_constant_id_offset 0
layout (constant_id = shape_constant_id_offset + 0) const int w = 0;
layout (constant_id = shape_constant_id_offset + 1) const int h = 0;
layout (constant_id = shape_constant_id_offset + 2) const int c = 0;
layout (constant_id = shape_constant_id_offset + 3) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform highp sampler3D bottom_top_blob;
layout (binding = 1, rgba32f) writeonly uniform highp image3D mean_blob;
#else
layout (binding = 0) readonly buffer bottom_top_blob { mat2x4 bottom_top_blob_data[]; };
layout (binding = 1) writeonly buffer mean_blob { mat2x4 mean_data[]; };
#endif

layout (push_constant) uniform parameter
{
int w;
int h;
int c;
int cstep;
float area;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(c) || gy >= 1 || gz >= 1)
return;

mat2x4 sum = mat2x4(0.f);

#if NCNN_image_shader
for (int i = 0; i < p.h; i++)
{
for (int j = 0; j < p.w; j++)
{
sum += mat2x4(texelFetch(bottom_top_blob, ivec3(j * 2, i, gx), 0), texelFetch(bottom_top_blob, ivec3(j * 2 + 1, i, gx), 0));
}
}
#else
int v_offset = gx * psc(cstep);

for (int i = 0; i < p.w; i++)
{
sum += bottom_top_blob_data[v_offset];
v_offset += 1;
}
#endif

mat2x4 mean;
mean[0] = sum[0] / p.area;
mean[1] = sum[1] / p.area;

#if NCNN_image_shader
imageStore(mean_blob, ivec3(gx * 2, 0, 0), mean[0]);
imageStore(mean_blob, ivec3(gx * 2 + 1, 0, 0), mean[1]);
#else
mean_data[gx] = mean;
#endif
}
