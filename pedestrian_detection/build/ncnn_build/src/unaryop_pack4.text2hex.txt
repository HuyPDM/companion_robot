#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int op_type = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) buffer bottom_top_blob { sfpvec4 bottom_top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
int dims;
int w;
int h;
int c;
int cstep;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
return;

#if NCNN_image_shader
afpvec4 v = image3d_ld4(bottom_blob_3d, ivec3(gx, gy, gz));
#else
const int gi = gz * psc(cstep) + gy * psc(w) + gx;

afpvec4 v = buffer_ld4(bottom_top_blob_data, gi);
#endif

afpvec4 res;

if (op_type == 0) res = abs(v);
if (op_type == 1) res = -v;
if (op_type == 2) res = floor(v);
if (op_type == 3) res = ceil(v);
if (op_type == 4) res = v * v;
if (op_type == 5) res = sqrt(v);
if (op_type == 6) res = inversesqrt(v);
if (op_type == 7) res = exp(v);
if (op_type == 8) res = log(v);
if (op_type == 9) res = sin(v);
if (op_type == 10) res = cos(v);
if (op_type == 11) res = tan(v);
if (op_type == 12) res = asin(v);
if (op_type == 13) res = acos(v);
if (op_type == 14) res = atan(v);
if (op_type == 15) res = afp(1.f) / v;
if (op_type == 16) res = tanh(v);

#if NCNN_image_shader
image3d_st4(top_blob_3d, ivec3(gx, gy, gz), res);
#else
buffer_st4(bottom_top_blob_data, gi, res);
#endif
}
