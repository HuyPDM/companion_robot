#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
struct sfpvec8 { f16vec4 abcd; f16vec4 efgh; };
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const int axis = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

layout (constant_id = shape_constant_id_offset + 5) const int outdims = 0;
layout (constant_id = shape_constant_id_offset + 6) const int outw = 0;
layout (constant_id = shape_constant_id_offset + 7) const int outh = 0;
layout (constant_id = shape_constant_id_offset + 8) const int outc = 0;
layout (constant_id = shape_constant_id_offset + 9) const int outcstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_top_blob_3d;
layout (binding = 1, imfmtc4) writeonly uniform unfp image3D max_workspace_3d;
#else
layout (binding = 0) readonly buffer bottom_top_blob { sfpvec8 bottom_top_blob_data[]; };
layout (binding = 1) writeonly buffer max_workspace { sfpvec8 max_workspace_data[]; };
#endif

layout (push_constant) uniform parameter
{
int dims;
int w;
int h;
int c;
int cstep;

int outdims;
int outw;
int outh;
int outc;
int outcstep;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(outw) || gy >= psc(outh) || gz >= psc(outc))
return;

int positive_axis = axis < 0 ? psc(dims) + axis : axis;
afpvec8 max_value = afpvec8(afpvec4(-99999999.f), afpvec4(-99999999.f));

if (psc(dims) == 1) // positive_axis == 0
{
for (int i = 0; i < psc(w); i++)
{
#if NCNN_image_shader
afpvec8 v = image3d_ld8(bottom_top_blob_3d, ivec3(i, 0, 0));
#else
afpvec8 v = buffer_ld8(bottom_top_blob_data, i);
#endif
max_value[0] = max(max_value[0], v[0]);
max_value[1] = max(max_value[1], v[1]);
}
afpvec4 max4 = max(max_value[0], max_value[1]);
afpvec2 max2 = max(max4.rg, max4.ba);
afp max1 = max(max2.r, max2.g);
max_value = afpvec8(afpvec4(max1), afpvec4(max1));
#if NCNN_image_shader
image3d_st8(max_workspace_3d, ivec3(0, 0, 0), max_value);
#else
buffer_st8(max_workspace_data, 0, max_value);
#endif
return;
}

if (psc(dims) == 2 && positive_axis == 0)
{
for (int i = 0; i < psc(h); i++)
{
#if NCNN_image_shader
afpvec8 v = image3d_ld8(bottom_top_blob_3d, ivec3(gx, i, 0));
#else
int v_offset = i * psc(w) + gx;
afpvec8 v = buffer_ld8(bottom_top_blob_data, v_offset);
#endif
max_value[0] = max(max_value[0], v[0]);
max_value[1] = max(max_value[1], v[1]);
}
afpvec4 max4 = max(max_value[0], max_value[1]);
afpvec2 max2 = max(max4.rg, max4.ba);
afp max1 = max(max2.r, max2.g);
max_value = afpvec8(afpvec4(max1), afpvec4(max1));
#if NCNN_image_shader
image3d_st8(max_workspace_3d, ivec3(gx, 0, 0), max_value);
#else
buffer_st8(max_workspace_data, gx, max_value);
#endif
return;
}

if (psc(dims) == 2 && positive_axis == 1)
{
for (int i = 0; i < psc(w); i++)
{
#if NCNN_image_shader
afpvec8 v = image3d_ld8(bottom_top_blob_3d, ivec3(i, gx, 0));
#else
int v_offset = gx * psc(w) + i;
afpvec8 v = buffer_ld8(bottom_top_blob_data, v_offset);
#endif
max_value[0] = max(max_value[0], v[0]);
max_value[1] = max(max_value[1], v[1]);
}
#if NCNN_image_shader
image3d_st8(max_workspace_3d, ivec3(gx, 0, 0), max_value);
#else
buffer_st8(max_workspace_data, gx, max_value);
#endif
return;
}

if (psc(dims) == 3 && positive_axis == 0)
{
for (int i = 0; i < psc(c); i++)
{
#if NCNN_image_shader
afpvec8 v = image3d_ld8(bottom_top_blob_3d, ivec3(gx, gy, i));
#else
int v_offset = i * psc(cstep) + gy * psc(w) + gx;
afpvec8 v = buffer_ld8(bottom_top_blob_data, v_offset);
#endif
max_value[0] = max(max_value[0], v[0]);
max_value[1] = max(max_value[1], v[1]);
}
afpvec4 max4 = max(max_value[0], max_value[1]);
afpvec2 max2 = max(max4.rg, max4.ba);
afp max1 = max(max2.r, max2.g);
max_value = afpvec8(afpvec4(max1), afpvec4(max1));
#if NCNN_image_shader
image3d_st8(max_workspace_3d, ivec3(gx, gy, 0), max_value);
#else
buffer_st8(max_workspace_data, gy * psc(w) + gx, max_value);
#endif
return;
}

if (psc(dims) == 3 && positive_axis == 1)
{
for (int i = 0; i < psc(h); i++)
{
#if NCNN_image_shader
afpvec8 v = image3d_ld8(bottom_top_blob_3d, ivec3(gx, i, gy));
#else
int v_offset = gy * psc(cstep) + i * psc(w) + gx;
afpvec8 v = buffer_ld8(bottom_top_blob_data, v_offset);
#endif
max_value[0] = max(max_value[0], v[0]);
max_value[1] = max(max_value[1], v[1]);
}
#if NCNN_image_shader
image3d_st8(max_workspace_3d, ivec3(gx, gy, 0), max_value);
#else
buffer_st8(max_workspace_data, gy * psc(w) + gx, max_value);
#endif
return;
}

if (psc(dims) == 3 && positive_axis == 2)
{
for (int i = 0; i < psc(w); i++)
{
#if NCNN_image_shader
afpvec8 v = image3d_ld8(bottom_top_blob_3d, ivec3(i, gx, gy));
#else
int v_offset = gy * psc(cstep) + gx * psc(w) + i;
afpvec8 v = buffer_ld8(bottom_top_blob_data, v_offset);
#endif
max_value[0] = max(max_value[0], v[0]);
max_value[1] = max(max_value[1], v[1]);
}
#if NCNN_image_shader
image3d_st8(max_workspace_3d, ivec3(gx, gy, 0), max_value);
#else
buffer_st8(max_workspace_data, gy * psc(h) + gx, max_value);
#endif
return;
}
}
