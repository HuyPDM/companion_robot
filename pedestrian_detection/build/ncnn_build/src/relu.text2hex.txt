#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif
#if NCNN_fp16_arithmetic
#extension GL_EXT_shader_explicit_arithmetic_types_float16: require
#endif

layout (constant_id = 0) const float slope = 0;

#define shape_constant_id_offset 1
layout (constant_id = shape_constant_id_offset + 0) const int dims = 0;
layout (constant_id = shape_constant_id_offset + 1) const int w = 0;
layout (constant_id = shape_constant_id_offset + 2) const int h = 0;
layout (constant_id = shape_constant_id_offset + 3) const int c = 0;
layout (constant_id = shape_constant_id_offset + 4) const int cstep = 0;

#if NCNN_image_shader
layout (binding = 0) uniform unfp sampler3D bottom_blob_3d;
layout (binding = 1, imfmtc1) writeonly uniform unfp image3D top_blob_3d;
#else
layout (binding = 0) buffer bottom_top_blob { sfp bottom_top_blob_data[]; };
#endif

layout (push_constant) uniform parameter
{
int dims;
int w;
int h;
int c;
int cstep;
} p;

void main()
{
int gx = int(gl_GlobalInvocationID.x);
int gy = int(gl_GlobalInvocationID.y);
int gz = int(gl_GlobalInvocationID.z);

if (gx >= psc(w) || gy >= psc(h) || gz >= psc(c))
return;

#if NCNN_image_shader
afp v = image3d_ld1(bottom_blob_3d, ivec3(gx, gy, gz));
#else
const int gi = gz * psc(cstep) + gy * psc(w) + gx;

afp v = buffer_ld1(bottom_top_blob_data, gi);
#endif

if (slope == 0)
v = max(v, afp(0.f));
else
v = v < afp(0.f) ? v * afp(slope) : v;

#if NCNN_image_shader
image3d_st1(top_blob_3d, ivec3(gx, gy, gz), v);
#else
buffer_st1(bottom_top_blob_data, gi, v);
#endif
}
